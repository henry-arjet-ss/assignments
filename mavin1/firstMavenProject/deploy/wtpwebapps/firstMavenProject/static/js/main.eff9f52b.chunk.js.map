{"version":3,"sources":["LoginForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","useState","style","text","head","setHead","formik","useFormik","initialValues","username","password","validate","values","errors","onSubmit","fetch","window","location","origin","method","headers","body","JSON","stringify","then","response","status","json","data","btoa","id","styles","color","console","log","handleSubmit","Form","noValidate","Group","controlId","Label","Control","required","type","value","onChange","handleChange","onBlur","handleBlur","isInvalid","touched","Feedback","Button","variant","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA2EiBA,MAvEjB,WACI,MAAwBC,mBAAS,CAACC,MAAM,GAAIC,KAAK,kBAAjD,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAASC,YAAU,CACrBC,cAAe,CACbC,SAAU,GACVC,SAAU,IAEZC,SAGJ,SAAkBC,GACd,IAAMC,EAAS,GACXD,EAAOH,WACPI,EAAOJ,SAAW,YAElBG,EAAOF,WACPG,EAAOH,SAAW,YAEtB,OAAOG,GAVPC,SAAU,SAAAF,IAYd,SAAsBA,GAClBG,MAAMC,OAAOC,SAASC,OAAS,0BAA2B,CACtDC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAACd,SAAUG,EAAOH,SAAUC,SAAUE,EAAOF,aACnEc,MAAK,SAAAC,GACoB,MAApBA,EAASC,OACTD,EAASE,OAAOH,MAAK,SAAAI,GACjBA,EAAKxB,KAAO,SAAWyB,KAAKD,EAAKE,GAAK,IAAMF,EAAKlB,aAE1B,MAApBe,EAASC,QAChBpB,EAAOM,OAAOF,SAAW,GACzBL,EAAQ,CAAC0B,OAAQ,CAACC,MAAM,OAAO7B,KAAM,mCAErC8B,QAAQC,IAAI,2BACZ7B,EAAQ,CAAC0B,OAAQ,CAACC,MAAM,OAAO7B,KAAM,gDA3BxBgC,CAAavB,MA+BtC,OACI,eAACwB,EAAA,EAAD,CAAMC,YAAU,EAACvB,SAAUR,EAAO6B,aAAlC,UACI,oBAAIjC,MAAOE,EAAKF,MAAhB,SAAwBE,EAAKD,OAC7B,eAACiC,EAAA,EAAKE,MAAN,CAAYC,UAAU,WAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,UAAQ,EAACC,KAAK,OAC5BC,MAAOtC,EAAOM,OAAOH,SACrBoC,SAAUvC,EAAOwC,aACjBC,OAAQzC,EAAO0C,WACfC,UAAW3C,EAAO4C,QAAQzC,UAAYH,EAAOO,OAAOJ,WACpD,cAAC2B,EAAA,EAAKK,QAAQU,SAAd,CAAuBR,KAAK,UAA5B,2CAIJ,eAACP,EAAA,EAAKE,MAAN,CAAYC,UAAU,WAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,UAAQ,EAACC,KAAK,WAC5BC,MAAOtC,EAAOM,OAAOF,SACrBqC,OAAQzC,EAAO0C,WACfH,SAAUvC,EAAOwC,aACjBG,UAAW3C,EAAO4C,QAAQxC,UAAYJ,EAAOO,OAAOH,WACpD,cAAC0B,EAAA,EAAKK,QAAQU,SAAd,CAAuBR,KAAK,UAA5B,2CAKJ,uBACA,cAACS,EAAA,EAAD,CAAQC,QAAQ,OAAOV,KAAK,SAA5B,6BC1DGW,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eff9f52b.chunk.js","sourcesContent":["import React, {useState } from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { useFormik, } from 'formik';\r\n\r\nfunction LoginForm(){\r\n    const [head, setHead] = useState({style:{}, text:\"Please Log In\"});\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n          username: '',\r\n          password: '',\r\n        },\r\n        validate,\r\n        onSubmit: values => {handleSubmit(values);},\r\n    });\r\n    function validate(values){\r\n        const errors = {};\r\n        if(!values.username){\r\n            errors.username = \"Required\";\r\n        }\r\n        if(!values.password){\r\n            errors.password = \"Required\";\r\n        }\r\n        return errors;\r\n    }\r\n    function handleSubmit(values){\r\n        fetch(window.location.origin + \"firstMavenProject/login\", {\r\n            method: \"POST\",\r\n            headers: {'Content-Type': 'application/json',},\r\n            body: JSON.stringify({username: values.username, password: values.password})\r\n        }).then(response => {\r\n            if (response.status === 200) {\r\n                response.json().then(data => {\r\n                    data.head = \"Basic \" + btoa(data.id + \":\" + data.password);\r\n                });\r\n            } else if (response.status === 401) {\r\n                formik.values.password = \"\";\r\n                setHead({styles: {color:\"red\"},text: \"Invalid username or password\"});\r\n            } else{\r\n                console.log(\"something went wrong :{\");\r\n                setHead({styles: {color:\"red\"},text: \"Something went wrong. Sorry about that.\"});\r\n            }\r\n        });\r\n    }\r\n    return (\r\n        <Form noValidate onSubmit={formik.handleSubmit}>\r\n            <h2 style={head.style}>{head.text}</h2>\r\n            <Form.Group controlId=\"username\">\r\n                <Form.Label>Username</Form.Label>\r\n                <Form.Control required type=\"text\"\r\n                value={formik.values.username}\r\n                onChange={formik.handleChange}\r\n                onBlur={formik.handleBlur}\r\n                isInvalid={formik.touched.username && formik.errors.username }/>\r\n                <Form.Control.Feedback type=\"invalid\" >\r\n                    Please enter your username\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control required type=\"password\"\r\n                value={formik.values.password}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                isInvalid={formik.touched.password && formik.errors.password } />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Please enter your password\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n            <br/>\r\n            <Button variant=\"dark\" type=\"submit\">Let's Do It</Button>\r\n        </Form>\r\n    )\r\n  }\r\n  export default LoginForm;","import './App.css';\nimport LoginForm from './LoginForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"page\">\n        <LoginForm/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}